edn = form + WS* ;


<form> = atom
	   | list
       | object
       | vector
       | keyword
       | WS* form 
       | dispatched-form 
       | comment
       ;

<atom> = (built-in | number | symbol | string | character);

character = "\\" ((!#"[A-Za-z]{2}" #"[A-Za-z]") | "newline" | "space" | "return" | "tab") ;

<number> = floating-point / integer ;

floating-point = int "M" 
               | int frac
               | int exp
               | int frac exp
               ;

frac = "." #"[0-9]+" ;

exp = #"[Ee][+-]?" ;

integer = int "N"?

<int> = ("+"|"-")? (#'[1-9][0-9]+' / #'[0-9]') ;

string = #'("[^"\\]*(?:\\.[^"\\]*)*")' ; 

<built-in> = boolean | nil ;

boolean = "true" | "false" ;

nil = "nil" ;

keyword = ":" identifier ;

dispatched-form = "#" dispatch-modifier? form ;

dispatch-modifier = discard | tagged ;

discard = "_"

tagged = symbol;

vector =  "[" form* "]"  ;

list = "(" form ")" ;

object =  "{"  pair* "}"  ;

<pair> = key val ;

key = form ;

val = form ;

comment = ";" #"[^\n]+" "\n"? ;

<letters> = #"[A-Za-z]+" ; (* a conventional start *)

symbol = identifier
       | namespaced-symbol ;

(* <identifier> = namespaced-symbol 
             / prefix-character all-id-chars
             / non-numeric non-numeric all-id-chars 
             /  non-numeric non-numeric
             / non-numeric
             ;
 *)

<identifier> = #"[A-Za-z*!\_?$%&=][0-9A-Za-z.*+!\-_?$%&=]*" 
             | #"[A-Za-z.*+!\-_?$%&=][A-Za-z.*+!\-_?$%&=]*[0-9A-Za-z.*+!\-_?$%&=]*"

<namespaced-symbol> = symbol "/" symbol ;

<non-numeric> =  #"[A-Za-z.*+!\-_?$%&=]" ;

<prefix-character> =  #"[A-Za-z*!\_?$%&=]" ;

<all-id-chars> = #"[0-9A-Za-z.*+!\-_?$%&=]+" ;

(* #"[A-Za-z.*+!\-_?$%&=]" *) 
(*
symbol = symbol "." symbol 
       | symbol "/" symbol
       | symbol "." symbol "/" symbol
       | letters
       ;
*)
<WS> = #"[\s,]+"	 ; (* commas are whitespace *)