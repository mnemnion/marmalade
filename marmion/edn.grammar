edn = form + ;


<form> = atom
	   | list
       | object
       | vector
       | keyword
       | WS* form WS*
       | dispatched-form 
       | comment
       ;

<atom> = built-in / (symbol | string | character);

character = "\\" ((!#"[A-Za-z]{2}" #"[A-Za-z]") | "newline" | "space" | "return" | "tab") WS ;

string = #'("[^"\\]*(?:\\.[^"\\]*)*")' ; 

<built-in> = boolean | nil ;

boolean = "true" | "false" ;

nil = "nil" ;

dispatched-form = "#" dispatch-modifier? form ;

dispatch-modifier = discard | tagged ;

discard = "_"

tagged = symbol;

vector =  "[" form* "]"  ;

list = "(" form ")" ;

object =  "{"  pair* "}"  ;

<pair> = key val ;

key = form ;

val = form ;

comment = ";" #"[^\n]+" "\n"? ;

<letters> = #"[A-Za-z]+" ; (* a conventional start *)


symbol = non-numeric 
       | non-numeric non-numeric
       | non-numeric non-numeric all-id-chars 
       | prefix-character all-id-chars
       | namespaced-symbol ;

<namespaced-symbol> = symbol "/" symbol ;

<non-numeric> =  #"[A-Za-z.*+!\-_?$%&=]" ;

<prefix-character> =  #"[A-Za-z*!\_?$%&=]" ;

<all-id-chars> = #"[0-9A-Za-z.*+!\-_?$%&=]+" ;

(* #"[A-Za-z.*+!\-_?$%&=]" *) 
(*
symbol = symbol "." symbol 
       | symbol "/" symbol
       | symbol "." symbol "/" symbol
       | letters
       ;
*)
<WS> = #"[\s,]+"	 ; (* commas are whitespace *)

keyword = #"[:][A-Za-z]+" ;